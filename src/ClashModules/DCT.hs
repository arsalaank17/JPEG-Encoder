module DCT where
import Clash.Prelude 

type FixedPoint = SFixed 16 16 



dct :: Vec 8 (Vec 8 FixedPoint) -> Vec 8 (Vec 8 FixedPoint) -> Vec 8 (Vec 8 FixedPoint)
dct inputMatrix cosLookupTable  = transpose part
  where
    part = map (f) transposedInput
    transposedInput = transpose (map (g) inputMatrix)
    g block = map (subtract (sum block / (8 :: FixedPoint))) block
    dotProduct xs ys = sum (zipWith (*) xs ys)
    f row = (map (dotProduct row)) cosLookupTable

dctMain :: Vec 3 (Vec 8 (Vec 8 FixedPoint)) -> Vec 3 (Vec 8 (Vec 8 FixedPoint)) -> Vec 3 (Vec 8 (Vec 8 FixedPoint))
dctMain iData cosTable = zipWith dct iData cosTable


cosineLookupTable :: Vec 3 (Vec 8 (Vec 8 FixedPoint))
cosineLookupTable = (( (1.0 :: FixedPoint) :> 0.9807852804032304 :> 0.9238795325112867 :> 0.8314696123025452:> 0.7071067811865476 :> 0.5555702330196023 :> 0.38268343236508984 :> 0.19509032201612833:> Nil) :>
  ( (0.9807852804032304 :: FixedPoint) :> 0.9238795325112867 :> 0.8314696123025452 :> 0.7071067811865476 :> 0.5555702330196023 :> 0.38268343236508984 :> 0.19509032201612833 :> 6.123233995736766e-17 :> Nil) :>
  ( (0.9238795325112867 :: FixedPoint) :> 0.8314696123025452 :> 0.7071067811865476 :> 0.5555702330196023 :> 0.38268343236508984 :> 0.19509032201612833 :> 6.123233995736766e-17 :> -0.19509032201612825 :> Nil) :>
  ( (0.8314696123025452 :: FixedPoint) :> 0.7071067811865476 :> 0.5555702330196023 :> 0.38268343236508984 :> 0.19509032201612833 :> 6.123233995736766e-17 :> -0.19509032201612825 :> -0.3826834323650897 :> Nil) :>
  ( (0.7071067811865476 :: FixedPoint) :> 0.5555702330196023 :> 0.38268343236508984 :> 0.19509032201612833 :> 6.123233995736766e-17 :> -0.19509032201612825 :> -0.3826834323650897 :> -0.555570233019602 :> Nil) :>
  ( (0.5555702330196023 :: FixedPoint) :> 0.38268343236508984 :> 0.19509032201612833 :> 6.123233995736766e-17 :> -0.19509032201612825 :> -0.3826834323650897 :> -0.555570233019602 :> -0.7071067811865475 :> Nil) :>
  ( (0.38268343236508984 :: FixedPoint) :> 0.19509032201612833 :> 6.123233995736766e-17 :> -0.19509032201612825 :> -0.3826834323650897 :> -0.555570233019602 :> -0.7071067811865475 :> -0.8314696123025452 :> Nil) :>
  ( (0.19509032201612833 :: FixedPoint) :> 6.123233995736766e-17 :> -0.19509032201612825 :> -0.3826834323650897 :> -0.555570233019602 :> -0.7071067811865475 :> -0.8314696123025452 :> -0.9238795325112867 :> Nil) :> Nil) :>
  (((1.0 :: FixedPoint) :> 0.9807852804032304 :> 0.9238795325112867 :> 0.8314696123025452:> 0.7071067811865476 :> 0.5555702330196023 :> 0.38268343236508984 :> 0.19509032201612833:> Nil) :>
  ( (0.9807852804032304 :: FixedPoint) :> 0.9238795325112867 :> 0.8314696123025452 :> 0.7071067811865476 :> 0.5555702330196023 :> 0.38268343236508984 :> 0.19509032201612833 :> 6.123233995736766e-17 :> Nil) :>
  ( (0.9238795325112867 :: FixedPoint) :> 0.8314696123025452 :> 0.7071067811865476 :> 0.5555702330196023 :> 0.38268343236508984 :> 0.19509032201612833 :> 6.123233995736766e-17 :> -0.19509032201612825 :> Nil) :>
  ( (0.8314696123025452 :: FixedPoint) :> 0.7071067811865476 :> 0.5555702330196023 :> 0.38268343236508984 :> 0.19509032201612833 :> 6.123233995736766e-17 :> -0.19509032201612825 :> -0.3826834323650897 :> Nil) :>
  ( (0.7071067811865476 :: FixedPoint) :> 0.5555702330196023 :> 0.38268343236508984 :> 0.19509032201612833 :> 6.123233995736766e-17 :> -0.19509032201612825 :> -0.3826834323650897 :> -0.555570233019602 :> Nil) :>
  ( (0.5555702330196023 :: FixedPoint) :> 0.38268343236508984 :> 0.19509032201612833 :> 6.123233995736766e-17 :> -0.19509032201612825 :> -0.3826834323650897 :> -0.555570233019602 :> -0.7071067811865475 :> Nil) :>
  ( (0.38268343236508984 :: FixedPoint) :> 0.19509032201612833 :> 6.123233995736766e-17 :> -0.19509032201612825 :> -0.3826834323650897 :> -0.555570233019602 :> -0.7071067811865475 :> -0.8314696123025452 :> Nil) :>
  ( (0.19509032201612833 :: FixedPoint) :> 6.123233995736766e-17 :> -0.19509032201612825 :> -0.3826834323650897 :> -0.555570233019602 :> -0.7071067811865475 :> -0.8314696123025452 :> -0.9238795325112867 :> Nil) :> Nil) :>
  (((1.0 :: FixedPoint) :> 0.9807852804032304 :> 0.9238795325112867 :> 0.8314696123025452:> 0.7071067811865476 :> 0.5555702330196023 :> 0.38268343236508984 :> 0.19509032201612833:> Nil) :>
  ( (0.9807852804032304 :: FixedPoint) :> 0.9238795325112867 :> 0.8314696123025452 :> 0.7071067811865476 :> 0.5555702330196023 :> 0.38268343236508984 :> 0.19509032201612833 :> 6.123233995736766e-17 :> Nil) :>
  ( (0.9238795325112867 :: FixedPoint) :> 0.8314696123025452 :> 0.7071067811865476 :> 0.5555702330196023 :> 0.38268343236508984 :> 0.19509032201612833 :> 6.123233995736766e-17 :> -0.19509032201612825 :> Nil) :>
  ( (0.8314696123025452 :: FixedPoint) :> 0.7071067811865476 :> 0.5555702330196023 :> 0.38268343236508984 :> 0.19509032201612833 :> 6.123233995736766e-17 :> -0.19509032201612825 :> -0.3826834323650897 :> Nil) :>
  ( (0.7071067811865476 :: FixedPoint) :> 0.5555702330196023 :> 0.38268343236508984 :> 0.19509032201612833 :> 6.123233995736766e-17 :> -0.19509032201612825 :> -0.3826834323650897 :> -0.555570233019602 :> Nil) :>
  ( (0.5555702330196023 :: FixedPoint) :> 0.38268343236508984 :> 0.19509032201612833 :> 6.123233995736766e-17 :> -0.19509032201612825 :> -0.3826834323650897 :> -0.555570233019602 :> -0.7071067811865475 :> Nil) :>
  ( (0.38268343236508984 :: FixedPoint) :> 0.19509032201612833 :> 6.123233995736766e-17 :> -0.19509032201612825 :> -0.3826834323650897 :> -0.555570233019602 :> -0.7071067811865475 :> -0.8314696123025452 :> Nil) :>
  ( (0.19509032201612833 :: FixedPoint) :> 6.123233995736766e-17 :> -0.19509032201612825 :> -0.3826834323650897 :> -0.555570233019602 :> -0.7071067811865475 :> -0.8314696123025452 :> -0.9238795325112867 :> Nil) :> Nil) :> Nil










apply_dct :: Vec 8 (Vec 8 FixedPoint) -> Vec 8 (Vec 8 FixedPoint) -> Vec 8 (Vec 8 FixedPoint)
apply_dct inputMatrix cosT = imap (\u row ->
        imap (\v _ ->
            let sum = foldl (\acc (x, y) ->
                            acc + (inputMatrix !! x !! y) *
                                  (cosT !! x !! u) *
                                  (cosT !! y !! v) * 3.14
                            ) 0 (cartesianProduct)
                cu = if u == 0 then 0.707107 else 1
                cv = if v == 0 then 0.707107 else 1
            in  (0.25 * cu * cv * sum)
        ) (row :: (Vec 8 FixedPoint))
    ) (((0 :: FixedPoint):>1:>2:>3:>4:>5:>6:>7:>Nil):>((0 :: FixedPoint):>1:>2:>3:>4:>5:>6:>7:>Nil):>((0 :: FixedPoint):>1:>2:>3:>4:>5:>6:>7:>Nil):>((0 :: FixedPoint):>1:>2:>3:>4:>5:>6:>7:>Nil):>((0 :: FixedPoint):>1:>2:>3:>4:>5:>6:>7:>Nil):>((0 :: FixedPoint):>1:>2:>3:>4:>5:>6:>7:>Nil):>((0 :: FixedPoint):>1:>2:>3:>4:>5:>6:>7:>Nil):>((0 :: FixedPoint):>1:>2:>3:>4:>5:>6:>7:>Nil):>Nil)

cartesianProduct :: Vec 64 (Int, Int)
cartesianProduct =
  (0, 0) :> (0, 1) :> (0, 2) :> (0, 3) :> (0, 4) :> (0, 5) :> (0, 6) :> (0, 7) :>
  (1, 0) :> (1, 1) :> (1, 2) :> (1, 3) :> (1, 4) :> (1, 5) :> (1, 6) :> (1, 7) :>
  (2, 0) :> (2, 1) :> (2, 2) :> (2, 3) :> (2, 4) :> (2, 5) :> (2, 6) :> (2, 7) :>
  (3, 0) :> (3, 1) :> (3, 2) :> (3, 3) :> (3, 4) :> (3, 5) :> (3, 6) :> (3, 7) :>
  (4, 0) :> (4, 1) :> (4, 2) :> (4, 3) :> (4, 4) :> (4, 5) :> (4, 6) :> (4, 7) :>
  (5, 0) :> (5, 1) :> (5, 2) :> (5, 3) :> (5, 4) :> (5, 5) :> (5, 6) :> (5, 7) :>
  (6, 0) :> (6, 1) :> (6, 2) :> (6, 3) :> (6, 4) :> (6, 5) :> (6, 6) :> (6, 7) :>
  (7, 0) :> (7, 1) :> (7, 2) :> (7, 3) :> (7, 4) :> (7, 5) :> (7, 6) :> (7, 7) :> Nil

